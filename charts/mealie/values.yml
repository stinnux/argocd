image:
  # -- The repository for docker images to use
  repository: ghcr.io/mealie-recipes/mealie

  # -- The pull policy for mealie images
  pullPolicy: IfNotPresent

  # -- Override the default app version with another version
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

mealie:
  # -- The number of api replicas to run. Only set above 1 if using postgres
  replicas: 1
  service:
    type: ClusterIP
    port: 9000

  env: {}

  # -- The initial delay for the liveness and readiness probes
  initialDelaySeconds: 10

ingress:
  enabled: true
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
  hosts:
  - host: mealie.k8s.stinnux.cloud
    paths:
    - path: /
      pathType: Prefix
  tls:
  - sniStrict: false



resources: {}

# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

storage:
  # -- Enable storage that isn't emphemeral
  enabled: true
  # -- The size of the storage to allocate
  size: 50G
  # -- The accessMode that is supported. If using ReadWriteMany multiple pods will be created. If using ReadWriteOnce a single pod will be used.
  accessMode: ReadWriteMany
